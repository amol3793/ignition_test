{
  "custom": {
    "AssetPath": "",
    "AssetSite": "",
    "opcServerName": ""
  },
  "params": {},
  "props": {
    "defaultSize": {
      "width": 1297
    },
    "dropConfig": {
      "udts": [
        {
          "action": "path",
          "param": "AssetPath",
          "type": "AutoGrid/Renewables_DR_ParentUDTs/v01"
        }
      ]
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "hasDiscreteDispatchTextField"
        },
        "position": {
          "height": 32,
          "width": 43,
          "x": 1240.5,
          "y": 29.25
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_isDiscreteDispatch\u0027"
              },
              "type": "tag"
            }
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "Label_0"
        },
        "position": {
          "height": 20,
          "width": 180,
          "x": 836.366,
          "y": 276
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "key": "value",
          "style": {
            "classes": "UDTConfigureTextFieldHeadingLabel"
          },
          "text": "OPC Item / PLC Address"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_17",
          "visible": false
        },
        "position": {
          "height": 43,
          "width": 187,
          "x": 21.5,
          "y": 220
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldNotes"
          },
          "text": "This dispatch mechanism recieves a dispatch signal on this asset but relays that dispatch signal to another asset"
        },
        "type": "ia.display.label"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\tif (self.props.selected):\n\t\tself.getSibling(\"hasAggregateDispatchTextField\").props.text \u003d 1\n\telse:\n\t\tself.getSibling(\"hasAggregateDispatchTextField\").props.text \u003d 0\n\t\t\n\tstartDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/startDispatch.Enabled\u0027\n\tstopDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/stopDispatch.Enabled\u0027\n\tstartDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/startDispatchFeedback.Enabled\u0027\n\tstopDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/stopDispatchFeedback.Enabled\u0027\n\tsetpointDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/setpointDispatch.Enabled\u0027\n\tsetpointDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/setpointDispatchFeedback.Enabled\u0027\n\thasControllerConfirm \u003d self.getSibling(\"hasControllerDispatchConfirmationCheckbox\").props.selected\n\thas3WireControl \u003d self.getSibling(\"is3WireDiscreteDispatchCheckbox\").props.selected\n\thasAggregateDispatch \u003d self.getSibling(\"hasAggregateDispatchCheckbox\").props.selected\n\tdispatchTypeRadioGroup \u003d self.getSibling(\"dispatchTypeRadioGroup\")\n\ttagList \u003d [\n\t\t\t\tstartDispatch,\n\t\t\t\tstopDispatch,\n\t\t\t\tstartDispatchFeedback,\n\t\t\t\tstopDispatchFeedback,\n\t\t\t\tsetpointDispatch,\n\t\t\t\tsetpointDispatchFeedback\n\t\t\t  ]\t\n\tif (dispatchTypeRadioGroup.props.value \u003d\u003d 1): #Analog Dispatch Selected\n\t\tself.getSibling(\"hasDiscreteDispatchTextField\").props.text \u003d 0\n\t\tself.getSibling(\"hasAnalogDispatchTextField\").props.text \u003d 1\n\t\tvalueList \u003d [False,False,False,False,True,hasControllerConfirm]\n#\t\tvalueList \u003d [False,False,False,False,True,True]\t\t\n\telse:\t\t\t\t\t\t#Discrete Dispatch Selected\n\t\tself.getSibling(\"hasDiscreteDispatchTextField\").props.text \u003d 1\n\t\tself.getSibling(\"hasAnalogDispatchTextField\").props.text \u003d 0\n\t\tvalueList \u003d [1,has3WireControl,hasControllerConfirm,has3WireControl and hasControllerConfirm,0,0]\n\tif (hasAggregateDispatch):\n\t\tvalueList \u003d [False,False,False,False,False,False]\n\tsystem.tag.writeBlocking(tagList, valueList)\n"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "hasAggregateDispatchCheckbox"
        },
        "position": {
          "height": 26,
          "width": 209,
          "x": 5,
          "y": 194
        },
        "propConfig": {
          "props.selected": {
            "binding": {
              "config": {
                "path": "../hasAggregateDispatchTextField.props.text"
              },
              "transforms": [
                {
                  "fallback": null,
                  "inputType": "scalar",
                  "mappings": [
                    {
                      "input": 0,
                      "output": false
                    },
                    {
                      "input": 1,
                      "output": true
                    }
                  ],
                  "outputType": "scalar",
                  "type": "map"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Has Aggregate Dispatch",
          "textPosition": "left"
        },
        "type": "ia.input.checkbox"
      },
      {
        "meta": {
          "name": "aggregateDispatchParentDropdown"
        },
        "position": {
          "height": 20,
          "width": 256,
          "x": 235.075,
          "y": 198.772
        },
        "propConfig": {
          "custom.AssetSite": {
            "binding": {
              "config": {
                "path": "session.custom.AssetSite"
              },
              "type": "property"
            }
          },
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasAggregateDispatchCheckbox.props.selected} || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.search.enabled": {
            "binding": {
              "config": {
                "path": ""
              },
              "enabled": false,
              "type": "property"
            }
          },
          "props.value": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_aggregateDispatchParentPath\u0027 "
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "options": null,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.dropdown"
      },
      {
        "meta": {
          "name": "Label_18",
          "visible": false
        },
        "position": {
          "height": 55,
          "width": 189,
          "x": 19,
          "y": 306
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldNotes"
          },
          "text": "This dispatch mechanism receives a dispatch setpoint from Flex Dispatch Setpoint Tag  and writes the value to the field controller\u0027s Setpoint Dispatch Address."
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_14"
        },
        "position": {
          "height": 38,
          "width": 144,
          "x": 687.5,
          "y": 291
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Analog Dispatch"
        },
        "type": "ia.display.label"
      },
      {
        "events": {
          "dom": {
            "onBlur": {
              "config": {
                "script": "\tif (self.props.text[0] !\u003d \u0027.\u0027):\n\t\tself.props.text \u003d \u0027.\u0027 + self.props.text \t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "setpointDispatchAddressTextField"
        },
        "position": {
          "height": 20,
          "width": 180,
          "x": 836.41,
          "y": 300
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.dispatch_setpointDispatchAddress\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "analogSetpointDispatch",
              "pageScope": false,
              "script": "\tself.props.text \u003d payload[\u0027opcTag\u0027]\n\tsystem.perspective.closePopup(\u0027opcPicker\u0027)",
              "sessionScope": true,
              "viewScope": false
            }
          ]
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "flex_dispatchSetpointTagTextField"
        },
        "position": {
          "height": 20,
          "width": 220,
          "x": 1051.5,
          "y": 299
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.flex_dispatchSetpointTag\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "partialDispatchMinTextField_0"
        },
        "position": {
          "height": 20,
          "width": 103,
          "x": 557.5,
          "y": 444
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_discreteDispatchControllerDispatchRTNValue\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "events": {
          "dom": {
            "onBlur": {
              "config": {
                "script": "\tif (self.props.text[0] !\u003d \u0027.\u0027):\n\t\tself.props.text \u003d \u0027.\u0027 + self.props.text \t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "dispatch_startDispatchAddressTextField"
        },
        "position": {
          "height": 20,
          "width": 180,
          "x": 820,
          "y": 410.75
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.dispatch_startDispatchAddress\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "startDispatchCommand",
              "pageScope": false,
              "script": "\tself.props.text \u003d payload[\u0027opcTag\u0027]\n\tsystem.perspective.closePopup(\u0027opcPicker\u0027)",
              "sessionScope": true,
              "viewScope": false
            }
          ]
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "partialDispatchMaxTextField_0"
        },
        "position": {
          "height": 20,
          "width": 103,
          "x": 557.5,
          "y": 410.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_discreteDispatchControllerDispatchValue\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "Label_20"
        },
        "position": {
          "height": 38,
          "width": 125,
          "x": 423.5,
          "y": 401.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Dispatch Value"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_21"
        },
        "position": {
          "height": 38,
          "width": 125,
          "x": 423.5,
          "y": 435
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "RTN Value"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_22",
          "visible": false
        },
        "position": {
          "height": 86,
          "width": 189,
          "x": 19,
          "y": 427.75
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldNotes"
          },
          "text": "This dispatch mechanism receives a dispatch signal from Flex Dispatch Command Tag (1 \u003d dispatch 0 \u003d normal) and writes one of two values (Dispatch Value or RTN Value) to the field controller\u0027s Start Dispatch Address and / or Stop Dispatch Address."
        },
        "type": "ia.display.label"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\tif (self.props.selected):\n\t\tself.getSibling(\"is3WireDiscreteDispatchTextField\").props.text \u003d 1\n\telse:\n\t\tself.getSibling(\"is3WireDiscreteDispatchTextField\").props.text \u003d 0\n\n\n\tstartDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/startDispatch.Enabled\u0027\n\tstopDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/stopDispatch.Enabled\u0027\n\tstartDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/startDispatchFeedback.Enabled\u0027\n\tstopDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/stopDispatchFeedback.Enabled\u0027\n\tsetpointDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/setpointDispatch.Enabled\u0027\n\tsetpointDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/setpointDispatchFeedback.Enabled\u0027\n\thasControllerConfirm \u003d self.getSibling(\"hasControllerDispatchConfirmationCheckbox\").props.selected\n\thas3WireControl \u003d self.getSibling(\"is3WireDiscreteDispatchCheckbox\").props.selected\n\thasAggregateDispatch \u003d self.getSibling(\"hasAggregateDispatchCheckbox\").props.selected\n\tdispatchTypeRadioGroup \u003d self.getSibling(\"dispatchTypeRadioGroup\")\n\ttagList \u003d [\n\t\t\t\tstartDispatch,\n\t\t\t\tstopDispatch,\n\t\t\t\tstartDispatchFeedback,\n\t\t\t\tstopDispatchFeedback,\n\t\t\t\tsetpointDispatch,\n\t\t\t\tsetpointDispatchFeedback\n\t\t\t  ]\t\n\tif (dispatchTypeRadioGroup.props.value \u003d\u003d 1): #Analog Dispatch Selected\n\t\tself.getSibling(\"hasDiscreteDispatchTextField\").props.text \u003d 0\n\t\tself.getSibling(\"hasAnalogDispatchTextField\").props.text \u003d 1\n\t\tvalueList \u003d [False,False,False,False,True,hasControllerConfirm]\n#\t\tvalueList \u003d [False,False,False,False,True,True]\t\t\n\telse:\t\t\t\t\t\t#Discrete Dispatch Selected\n\t\tself.getSibling(\"hasDiscreteDispatchTextField\").props.text \u003d 1\n\t\tself.getSibling(\"hasAnalogDispatchTextField\").props.text \u003d 0\n\t\tvalueList \u003d [1,has3WireControl,hasControllerConfirm,has3WireControl and hasControllerConfirm,0,0]\n\tif (hasAggregateDispatch):\n\t\tvalueList \u003d [False,False,False,False,False,False]\n\tsystem.tag.writeBlocking(tagList, valueList)\n"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "is3WireDiscreteDispatchCheckbox"
        },
        "position": {
          "height": 26,
          "width": 193,
          "x": 236.5,
          "y": 412
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.selected": {
            "binding": {
              "config": {
                "path": "../is3WireDiscreteDispatchTextField.props.text"
              },
              "transforms": [
                {
                  "fallback": false,
                  "inputType": "scalar",
                  "mappings": [
                    {
                      "input": 0,
                      "output": false
                    },
                    {
                      "input": 1,
                      "output": true
                    }
                  ],
                  "outputType": "scalar",
                  "type": "map"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Is 3-wire Control",
          "textPosition": "left"
        },
        "type": "ia.input.checkbox"
      },
      {
        "meta": {
          "name": "Label_23"
        },
        "position": {
          "height": 129,
          "width": 190,
          "x": 235.06,
          "y": 442.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldNotes"
          },
          "text": "If selected, this dispatch mechanism uses seperate Start Dispatch and Stop Dispatch addresses.  The Dispatch Value will be written to the Start Dispatch Address and the RTN value will be written to the Stop Dispatch Address when a dispatch occurs.  The opposite values will be written to the two addresses when the dispatch ends.\n\nIf not selected, the Dispatch Value and RTN value are only written to the Start Dispatch Address."
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_1"
        },
        "position": {
          "height": 20,
          "width": 239,
          "x": 1053,
          "y": 276
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "key": "value",
          "style": {
            "classes": "UDTConfigureTextFieldHeadingLabel"
          },
          "text": "Kafka Stream Tag"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_16"
        },
        "position": {
          "height": 38,
          "width": 144,
          "x": 671,
          "y": 434.25
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "({../dispatchTypeRadioGroup.props.value} \u003d 2) \u0026\u0026 ({../is3WireDiscreteDispatchCheckbox.props.selected}) || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Stop Dispatch"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_19"
        },
        "position": {
          "height": 38,
          "width": 144,
          "x": 671,
          "y": 401.75
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Start Dispatch"
        },
        "type": "ia.display.label"
      },
      {
        "events": {
          "dom": {
            "onBlur": {
              "config": {
                "script": "\tif (self.props.text[0] !\u003d \u0027.\u0027):\n\t\tself.props.text \u003d \u0027.\u0027 + self.props.text \t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "stopDispatchAddressTextField"
        },
        "position": {
          "height": 20,
          "width": 180,
          "x": 820.82,
          "y": 443.75
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "({../dispatchTypeRadioGroup.props.value} \u003d 2) \u0026\u0026 ({../is3WireDiscreteDispatchCheckbox.props.selected}) || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.dispatch_stopDispatchAddress\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "stopDispatchCommand",
              "pageScope": false,
              "script": "\tself.props.text \u003d payload[\u0027opcTag\u0027]\n\tsystem.perspective.closePopup(\u0027opcPicker\u0027)",
              "sessionScope": true,
              "viewScope": false
            }
          ]
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "flex_dispatchCommandTagTextField"
        },
        "position": {
          "height": 20,
          "width": 220,
          "x": 1052.5,
          "y": 475
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2  || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.flex_dispatchCommandTag\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "Label_24"
        },
        "position": {
          "height": 38,
          "width": 144,
          "x": 905,
          "y": 467
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Dispatch Command"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_2"
        },
        "position": {
          "height": 20,
          "width": 180,
          "x": 822.46,
          "y": 387.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "key": "value",
          "style": {
            "classes": "UDTConfigureTextFieldHeadingLabel"
          },
          "text": "OPC Item / PLC Address"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_3"
        },
        "position": {
          "height": 20,
          "width": 239,
          "x": 1037,
          "y": 387.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "key": "value",
          "style": {
            "classes": "UDTConfigureTextFieldHeadingLabel"
          },
          "text": "Kafka Stream Tag"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_25",
          "visible": false
        },
        "position": {
          "height": 55,
          "width": 188,
          "x": 21.5,
          "y": 82
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldNotes"
          },
          "text": "Selection indicates that the field controller provides feedback via a seperate dispatch feedback address that the dispatch signal has been received and acted upon."
        },
        "type": "ia.display.label"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\tif (self.props.selected):\n\t\tself.getSibling(\"hasControllerDispatchConfirmationTextField\").props.text \u003d 1\n\t\tself.getSibling(\"hasCalculatedDispatchConfirmationTextField\").props.text \u003d 0\n\telse:\n\t\tself.getSibling(\"hasControllerDispatchConfirmationTextField\").props.text \u003d 0\n\t\t\n\tstartDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/startDispatch.Enabled\u0027\n\tstopDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/stopDispatch.Enabled\u0027\n\tstartDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/startDispatchFeedback.Enabled\u0027\n\tstopDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/stopDispatchFeedback.Enabled\u0027\n\tsetpointDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/setpointDispatch.Enabled\u0027\n\tsetpointDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/setpointDispatchFeedback.Enabled\u0027\n\thasControllerConfirm \u003d self.getSibling(\"hasControllerDispatchConfirmationCheckbox\").props.selected\n\thas3WireControl \u003d self.getSibling(\"is3WireDiscreteDispatchCheckbox\").props.selected\n\thasAggregateDispatch \u003d self.getSibling(\"hasAggregateDispatchCheckbox\").props.selected\n\tdispatchTypeRadioGroup \u003d self.getSibling(\"dispatchTypeRadioGroup\")\n\ttagList \u003d [\n\t\t\t\tstartDispatch,\n\t\t\t\tstopDispatch,\n\t\t\t\tstartDispatchFeedback,\n\t\t\t\tstopDispatchFeedback,\n\t\t\t\tsetpointDispatch,\n\t\t\t\tsetpointDispatchFeedback\n\t\t\t  ]\t\n\tif (dispatchTypeRadioGroup.props.value \u003d\u003d 1): #Analog Dispatch Selected\n\t\tself.getSibling(\"hasDiscreteDispatchTextField\").props.text \u003d 0\n\t\tself.getSibling(\"hasAnalogDispatchTextField\").props.text \u003d 1\n\t\tvalueList \u003d [False,False,False,False,True,hasControllerConfirm]\n#\t\tvalueList \u003d [False,False,False,False,True,True]\t\t\n\telse:\t\t\t\t\t\t#Discrete Dispatch Selected\n\t\tself.getSibling(\"hasDiscreteDispatchTextField\").props.text \u003d 1\n\t\tself.getSibling(\"hasAnalogDispatchTextField\").props.text \u003d 0\n\t\tvalueList \u003d [1,has3WireControl,hasControllerConfirm,has3WireControl and hasControllerConfirm,0,0]\n\tif (hasAggregateDispatch):\n\t\tvalueList \u003d [False,False,False,False,False,False]\n\tsystem.tag.writeBlocking(tagList, valueList)\n\t\t\t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "hasControllerDispatchConfirmationCheckbox"
        },
        "position": {
          "height": 26,
          "width": 192,
          "x": 22,
          "y": 52
        },
        "propConfig": {
          "props.selected": {
            "binding": {
              "config": {
                "path": "../hasControllerDispatchConfirmationTextField.props.text"
              },
              "transforms": [
                {
                  "fallback": false,
                  "inputType": "scalar",
                  "mappings": [
                    {
                      "input": 0,
                      "output": false
                    },
                    {
                      "input": 1,
                      "output": true
                    }
                  ],
                  "outputType": "scalar",
                  "type": "map"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Has Controller Dispatch Confirmation",
          "textPosition": "left"
        },
        "type": "ia.input.checkbox"
      },
      {
        "meta": {
          "name": "Label_26",
          "visible": false
        },
        "position": {
          "height": 70,
          "width": 191,
          "x": 235.5,
          "y": 82
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldNotes"
          },
          "text": "Selection indicates that the feedback confirmation will be provided by comparing power production / consumption to threshold levels for normal and dispatch modes"
        },
        "type": "ia.display.label"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\tif (self.props.selected):\n\t\tself.getSibling(\"hasCalculatedDispatchConfirmationTextField\").props.text \u003d 1\n\t\tself.getSibling(\"hasControllerDispatchConfirmationTextField\").props.text \u003d 0\n\telse:\n\t\tself.getSibling(\"hasCalculatedDispatchConfirmationTextField\").props.text \u003d 0\n\n\n\tstartDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/startDispatch.Enabled\u0027\n\tstopDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/stopDispatch.Enabled\u0027\n\tstartDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/startDispatchFeedback.Enabled\u0027\n\tstopDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/stopDispatchFeedback.Enabled\u0027\n\tsetpointDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/setpointDispatch.Enabled\u0027\n\tsetpointDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/setpointDispatchFeedback.Enabled\u0027\n\thasControllerConfirm \u003d self.getSibling(\"hasControllerDispatchConfirmationCheckbox\").props.selected\n\thas3WireControl \u003d self.getSibling(\"is3WireDiscreteDispatchCheckbox\").props.selected\n\thasAggregateDispatch \u003d self.getSibling(\"hasAggregateDispatchCheckbox\").props.selected\n\tdispatchTypeRadioGroup \u003d self.getSibling(\"dispatchTypeRadioGroup\")\n\ttagList \u003d [\n\t\t\t\tstartDispatch,\n\t\t\t\tstopDispatch,\n\t\t\t\tstartDispatchFeedback,\n\t\t\t\tstopDispatchFeedback,\n\t\t\t\tsetpointDispatch,\n\t\t\t\tsetpointDispatchFeedback\n\t\t\t  ]\t\n\tif (dispatchTypeRadioGroup.props.value \u003d\u003d 1): #Analog Dispatch Selected\n\t\tself.getSibling(\"hasDiscreteDispatchTextField\").props.text \u003d 0\n\t\tself.getSibling(\"hasAnalogDispatchTextField\").props.text \u003d 1\n\t\tvalueList \u003d [False,False,False,False,True,hasControllerConfirm]\n#\t\tvalueList \u003d [False,False,False,False,True,True]\t\t\n\telse:\t\t\t\t\t\t#Discrete Dispatch Selected\n\t\tself.getSibling(\"hasDiscreteDispatchTextField\").props.text \u003d 1\n\t\tself.getSibling(\"hasAnalogDispatchTextField\").props.text \u003d 0\n\t\tvalueList \u003d [1,has3WireControl,hasControllerConfirm,has3WireControl and hasControllerConfirm,0,0]\n\tif (hasAggregateDispatch):\n\t\tvalueList \u003d [False,False,False,False,False,False]\n\tsystem.tag.writeBlocking(tagList, valueList)\n\t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "hasCalculatedDispatchConfirmationCheckbox"
        },
        "position": {
          "height": 26,
          "width": 193,
          "x": 236,
          "y": 52
        },
        "propConfig": {
          "props.selected": {
            "binding": {
              "config": {
                "path": "../hasCalculatedDispatchConfirmationTextField.props.text"
              },
              "transforms": [
                {
                  "fallback": false,
                  "inputType": "scalar",
                  "mappings": [
                    {
                      "input": 0,
                      "output": false
                    },
                    {
                      "input": 1,
                      "output": true
                    }
                  ],
                  "outputType": "scalar",
                  "type": "map"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Has Calculated Dispatch Confirmation",
          "textPosition": "left"
        },
        "type": "ia.input.checkbox"
      },
      {
        "meta": {
          "name": "calculatedDispatchFeedbackLowThresholdTextField"
        },
        "position": {
          "height": 20,
          "width": 103,
          "x": 561.5,
          "y": 91.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasCalculatedDispatchConfirmationCheckbox.props.selected} || {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_calculatedDispatchLowThreshold\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "Label_15"
        },
        "position": {
          "height": 38,
          "width": 125,
          "x": 427.5,
          "y": 82.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasCalculatedDispatchConfirmationCheckbox.props.selected} || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Low Threshold"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_27"
        },
        "position": {
          "height": 38,
          "width": 125,
          "x": 427.5,
          "y": 52
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasCalculatedDispatchConfirmationCheckbox.props.selected} || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "High Threshold"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "calculatedDispatchFeedbackHighThresholdTextField"
        },
        "position": {
          "height": 20,
          "width": 103,
          "x": 561.5,
          "y": 61
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasCalculatedDispatchConfirmationCheckbox.props.selected} || {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_calculatedDispatchHighThreshold\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "Label_28"
        },
        "position": {
          "height": 38,
          "width": 144,
          "x": 687.5,
          "y": 321
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasControllerDispatchConfirmationCheckbox.props.selected} \u0026\u0026 ({../dispatchTypeRadioGroup.props.value} \u003d 1) || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Analog Dispatch Feedback"
        },
        "type": "ia.display.label"
      },
      {
        "events": {
          "dom": {
            "onBlur": {
              "config": {
                "script": "\tif (self.props.text[0] !\u003d \u0027.\u0027):\n\t\tself.props.text \u003d \u0027.\u0027 + self.props.text \t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "setpointDispatchFeedbackAddressTextField"
        },
        "position": {
          "height": 20,
          "width": 180,
          "x": 836.41,
          "y": 330
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasControllerDispatchConfirmationCheckbox.props.selected} \u0026\u0026 ({../dispatchTypeRadioGroup.props.value} \u003d 1) || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.dispatch_setpointDispatchFeedbackAddress\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "analogSetpointDispatchFeedback",
              "pageScope": false,
              "script": "\tself.props.text \u003d payload[\u0027opcTag\u0027]\n\tsystem.perspective.closePopup(\u0027opcPicker\u0027)",
              "sessionScope": true,
              "viewScope": false
            }
          ]
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "flex_setpointDispatchFeedbackTagtTextField"
        },
        "position": {
          "height": 20,
          "width": 220,
          "x": 1051.5,
          "y": 329
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasControllerDispatchConfirmationCheckbox.props.selected} \u0026\u0026 ({../dispatchTypeRadioGroup.props.value} \u003d 1) || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.flex_setpointDispatchFeedbackTag\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "events": {
          "dom": {
            "onBlur": {
              "config": {
                "script": "\tif (self.props.text[0] !\u003d \u0027.\u0027):\n\t\tself.props.text \u003d \u0027.\u0027 + self.props.text \t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "stopDispatchFeedbackAddressTextField"
        },
        "position": {
          "height": 20,
          "width": 180,
          "x": 820.82,
          "y": 539.75
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "({../dispatchTypeRadioGroup.props.value} \u003d 2) \u0026\u0026 ({../hasControllerDispatchConfirmationCheckbox.props.selected}) \u0026\u0026 ({../is3WireDiscreteDispatchCheckbox.props.selected}) || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.dispatch_stopDispatchFeedbackAddress\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "stopDispatchCommandFeedback",
              "pageScope": false,
              "script": "\tself.props.text \u003d payload[\u0027opcTag\u0027]\n\tsystem.perspective.closePopup(\u0027opcPicker\u0027)",
              "sessionScope": true,
              "viewScope": false
            }
          ]
        },
        "type": "ia.input.text-field"
      },
      {
        "events": {
          "dom": {
            "onBlur": {
              "config": {
                "script": "\tif (self.props.text[0] !\u003d \u0027.\u0027):\n\t\tself.props.text \u003d \u0027.\u0027 + self.props.text \t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "startDispatchFeedbackAddressTextField"
        },
        "position": {
          "height": 20,
          "width": 180,
          "x": 820,
          "y": 506.75
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "({../dispatchTypeRadioGroup.props.value} \u003d 2) \u0026\u0026 ({../hasControllerDispatchConfirmationCheckbox.props.selected}) || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.dispatch_startDispatchFeedbackAddress\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "startDispatchCommandFeedback",
              "pageScope": false,
              "script": "\tself.props.text \u003d payload[\u0027opcTag\u0027]\n\tsystem.perspective.closePopup(\u0027opcPicker\u0027)",
              "sessionScope": true,
              "viewScope": false
            }
          ]
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "Label_29"
        },
        "position": {
          "height": 38,
          "width": 168,
          "x": 647,
          "y": 530.25
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "({../dispatchTypeRadioGroup.props.value} \u003d 2) \u0026\u0026 ({../hasControllerDispatchConfirmationCheckbox.props.selected}) \u0026\u0026 ({../is3WireDiscreteDispatchCheckbox.props.selected}) || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Stop Dispatch Feedback"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_30"
        },
        "position": {
          "height": 38,
          "width": 165,
          "x": 650,
          "y": 497.75
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "({../dispatchTypeRadioGroup.props.value} \u003d 2) \u0026\u0026 ({../hasControllerDispatchConfirmationCheckbox.props.selected}) || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Start Dispatch Feedback"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "partialDispatchMinTextField"
        },
        "position": {
          "height": 20,
          "width": 103,
          "x": 603.5,
          "y": 335.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_analogDispatchManualRTNValue\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "partialDispatchMaxTextField"
        },
        "position": {
          "height": 20,
          "width": 103,
          "x": 603.5,
          "y": 300
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_analogDispatchManualDispatchValue\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "Label_12"
        },
        "position": {
          "height": 38,
          "width": 147,
          "x": 447.5,
          "y": 291
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Manual Analog Dispatch Value"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_13"
        },
        "position": {
          "height": 38,
          "width": 156,
          "x": 438.5,
          "y": 326.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Manual Analog Dispatch RTN Value"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "partialDispatchMinTextField_1"
        },
        "position": {
          "height": 20,
          "width": 103,
          "x": 342.5,
          "y": 335.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_analogDispatchMinValue\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "analogDispatchMaxValueTextField"
        },
        "position": {
          "height": 20,
          "width": 103,
          "x": 342.5,
          "y": 300
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_analogDispatchMaxValue\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "Label_31"
        },
        "position": {
          "height": 38,
          "width": 115,
          "x": 219.5,
          "y": 291
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Analog Dispatch Max Value"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_32"
        },
        "position": {
          "height": 38,
          "width": 126,
          "x": 208.5,
          "y": 326.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Analog Dispatch Min Value"
        },
        "type": "ia.display.label"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\tstartDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/startDispatch.Enabled\u0027\n\tstopDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/stopDispatch.Enabled\u0027\n\tstartDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/startDispatchFeedback.Enabled\u0027\n\tstopDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/stopDispatchFeedback.Enabled\u0027\n\tsetpointDispatch \u003d self.session.custom.AssetPath + \u0027/dispatch/setpointDispatch.Enabled\u0027\n\tsetpointDispatchFeedback \u003d self.session.custom.AssetPath + \u0027/dispatch/setpointDispatchFeedback.Enabled\u0027\n\thasControllerConfirm \u003d self.getSibling(\"hasControllerDispatchConfirmationCheckbox\").props.selected\n\thas3WireControl \u003d self.getSibling(\"is3WireDiscreteDispatchCheckbox\").props.selected\n\thasAggregateDispatch \u003d self.getSibling(\"hasAggregateDispatchCheckbox\").props.selected\n\tdispatchTypeRadioGroup \u003d self.getSibling(\"dispatchTypeRadioGroup\")\n\ttagList \u003d [\n\t\t\t\tstartDispatch,\n\t\t\t\tstopDispatch,\n\t\t\t\tstartDispatchFeedback,\n\t\t\t\tstopDispatchFeedback,\n\t\t\t\tsetpointDispatch,\n\t\t\t\tsetpointDispatchFeedback\n\t\t\t  ]\t\n\tif (dispatchTypeRadioGroup.props.value \u003d\u003d 1): #Analog Dispatch Selected\n\t\tself.getSibling(\"hasDiscreteDispatchTextField\").props.text \u003d 0\n\t\tself.getSibling(\"hasAnalogDispatchTextField\").props.text \u003d 1\n\t\tvalueList \u003d [False,False,False,False,True,hasControllerConfirm]\n#\t\tvalueList \u003d [False,False,False,False,True,True]\t\t\n\telse:\t\t\t\t\t\t#Discrete Dispatch Selected\n\t\tself.getSibling(\"hasDiscreteDispatchTextField\").props.text \u003d 1\n\t\tself.getSibling(\"hasAnalogDispatchTextField\").props.text \u003d 0\n\t\tvalueList \u003d [1,has3WireControl,hasControllerConfirm,has3WireControl and hasControllerConfirm,0,0]\n\tif (hasAggregateDispatch):\n\t\tvalueList \u003d [False,False,False,False,False,False]\n\tsystem.tag.writeBlocking(tagList, valueList)\n"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "dispatchTypeRadioGroup"
        },
        "position": {
          "height": 252,
          "rotate": {
            "anchor": "50% -52%"
          },
          "width": 209,
          "x": 21.562000000000012,
          "y": 295.5
        },
        "propConfig": {
          "props.value": {
            "binding": {
              "config": {
                "expression": "(toInteger({../hasAnalogDispatchTextField.props.text},0) * 1 + toInteger({../hasDiscreteDispatchTextField.props.text},0) * 2)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "align": "start",
          "index": 1,
          "justify": "end",
          "radios": [
            {
              "selected": false,
              "text": "Has Analog Dispatch   ",
              "value": 1
            },
            {
              "selected": true,
              "text": "Has Discrete Dispatch",
              "value": 2
            }
          ],
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "textPosition": "left"
        },
        "type": "ia.input.radio-group"
      },
      {
        "meta": {
          "name": "hasControllerDispatchConfirmationTextField"
        },
        "position": {
          "height": 33,
          "width": 43,
          "x": 1241.5,
          "y": 63.75
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_hasControllerDispatchFeedback\u0027"
              },
              "type": "tag"
            }
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "hasCalculatedDispatchConfirmationTextField"
        },
        "position": {
          "height": 32,
          "width": 43,
          "x": 1241.5,
          "y": 134.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": " {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_hasCalculatedDispatchFeedback\u0027"
              },
              "type": "tag"
            }
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "hasAggregateDispatchTextField"
        },
        "position": {
          "height": 32,
          "width": 43,
          "x": 1241.5,
          "y": 171.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": " {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_hasAggregateDispatch\u0027"
              },
              "type": "tag"
            }
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "Label_4"
        },
        "position": {
          "height": 20,
          "width": 195,
          "x": 258.366,
          "y": 174
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasAggregateDispatchCheckbox.props.selected} || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "key": "value",
          "style": {
            "classes": "UDTConfigureTextFieldHeadingLabel"
          },
          "text": "Aggregate Dispatch Parent"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "hasAnalogDispatchTextField"
        },
        "position": {
          "height": 32,
          "width": 43,
          "x": 1241.5,
          "y": 100.25
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_isAnalogDispatch\u0027"
              },
              "type": "tag"
            }
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "flex_stopDispatchFeedbackTagTextField"
        },
        "position": {
          "height": 20,
          "width": 220,
          "x": 1053.74,
          "y": 539.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "({../dispatchTypeRadioGroup.props.value} \u003d 2) \u0026\u0026 ({../hasControllerDispatchConfirmationCheckbox.props.selected}) \u0026\u0026 ({../is3WireDiscreteDispatchCheckbox.props.selected}) || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.flex_stopDispatchFeedbackTag\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "flex_startDispatchFeedbackTagTextField"
        },
        "position": {
          "height": 20,
          "width": 220,
          "x": 1052.73,
          "y": 506.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "({../dispatchTypeRadioGroup.props.value} \u003d 2) \u0026\u0026 ({../hasControllerDispatchConfirmationCheckbox.props.selected}) || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.flex_startDispatchFeedbackTag\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "Label_33"
        },
        "position": {
          "height": 34,
          "width": 189,
          "x": 248,
          "y": 364.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldNotes"
          },
          "text": "These values limit the analog dispatch setpoint received from Flex to a value between these upper and lower bounds."
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_34"
        },
        "position": {
          "height": 44,
          "width": 259,
          "x": 464.5,
          "y": 364
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 1 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldNotes"
          },
          "text": "When a manual dispatch of an asset is desired, the Manual Analog Dispatch Value is written to the controller.  When the manual dispatch is removed, the Manual Analog Dispatch RTN Value is written to the controller. "
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "is3WireDiscreteDispatchTextField"
        },
        "position": {
          "height": 32,
          "width": 43,
          "x": 1241.5,
          "y": 209.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": " {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.config_is3WireDiscreteDispatch\u0027"
              },
              "type": "tag"
            }
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "Label_35"
        },
        "position": {
          "height": 147,
          "width": 188.99999999999994,
          "x": 449.56,
          "y": 469.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../dispatchTypeRadioGroup.props.value} \u003d 2 || ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldNotes"
          },
          "text": "When a dispatch signal (value \u003d 1) is received from Flex on the discrete dispatch command stream, the Dispatch Value is written to the local controller start dispatch address. When the dispatch signal is removed, the RTN value is written to the controller start dispatch address.\n\nIf 3-wire control is selected, the RTN Value is written to the controller stop dispatch address during a dispatch and the Dispatch value is written to the controller stop dispatch address when a dispatch is not in progress."
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_36"
        },
        "position": {
          "height": 60,
          "width": 212,
          "x": 452.5,
          "y": 115.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasCalculatedDispatchConfirmationCheckbox.props.selected} || {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldNotes"
          },
          "text": "Measured real power above the High Threshold indicates that the asset has returned to normal.  A measured real power below the Low Threshold indicates that the asset has been dispatched"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_37"
        },
        "position": {
          "height": 38,
          "width": 198,
          "x": 703.5,
          "y": 55.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasCalculatedDispatchConfirmationCheckbox.props.selected} ||{../hasControllerDispatchConfirmationCheckbox.props.selected} || {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Dispatch Active Confirmation"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_38"
        },
        "position": {
          "height": 38,
          "width": 198,
          "x": 703.5,
          "y": 85.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasCalculatedDispatchConfirmationCheckbox.props.selected} ||{../hasControllerDispatchConfirmationCheckbox.props.selected} || {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Dispatch Confirmation Alarm"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_5"
        },
        "position": {
          "height": 20,
          "width": 293.65999999999997,
          "x": 913.34,
          "y": 40.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasCalculatedDispatchConfirmationCheckbox.props.selected} ||{../hasControllerDispatchConfirmationCheckbox.props.selected} || {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "key": "value",
          "style": {
            "classes": "UDTConfigureTextFieldHeadingLabel"
          },
          "text": "Kafka Stream Tag"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "flex_dispatchConfirmationTagTextField"
        },
        "position": {
          "height": 20,
          "width": 293.6600000000001,
          "x": 911.5,
          "y": 63.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasCalculatedDispatchConfirmationCheckbox.props.selected} ||{../hasControllerDispatchConfirmationCheckbox.props.selected} || {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.flex_dispatchConfirmedActiveTag\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "meta": {
          "name": "flex_dispatchConfirmationAlarmTagTextField"
        },
        "position": {
          "height": 20,
          "width": 293.6600000000001,
          "x": 911.5,
          "y": 93.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasCalculatedDispatchConfirmationCheckbox.props.selected} ||{../hasControllerDispatchConfirmationCheckbox.props.selected} || {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.flex_dispatchNOTConfirmedAlarmTag\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "draggable": true,
                "id": "opcPicker",
                "modal": false,
                "overlayDismiss": false,
                "resizable": false,
                "showCloseIcon": false,
                "type": "open",
                "viewParams": {
                  "callingID": "analogSetpointDispatch",
                  "opcItems": "{session.custom.opcItems}",
                  "opcLabel": "Analog Setpoint Dispatch",
                  "opcServerName": "{view.custom.opcServerName}",
                  "opcTag": ""
                },
                "viewPath": "UDTConfigure/opcPicker",
                "viewportBound": false
              },
              "scope": "C",
              "type": "popup"
            }
          }
        },
        "meta": {
          "name": "Button_7"
        },
        "position": {
          "height": 23,
          "width": 35,
          "x": 1016.5,
          "y": 298
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "(({../dispatchTypeRadioGroup.props.value} \u003d 1) \u0026\u0026 {view.custom.opcServerName} !\u003d \u0027Ignition OPC UA Server\u0027)|| ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "text": "pick"
        },
        "type": "ia.input.button"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "draggable": true,
                "id": "opcPicker",
                "modal": false,
                "overlayDismiss": false,
                "resizable": false,
                "showCloseIcon": false,
                "type": "open",
                "viewParams": {
                  "callingID": "analogSetpointDispatchFeedback",
                  "opcItems": "{session.custom.opcItems}",
                  "opcLabel": "Analog Setpoint Dispatch Feedback",
                  "opcServerName": "{view.custom.opcServerName}",
                  "opcTag": ""
                },
                "viewPath": "UDTConfigure/opcPicker",
                "viewportBound": false
              },
              "scope": "C",
              "type": "popup"
            }
          }
        },
        "meta": {
          "name": "Button_8"
        },
        "position": {
          "height": 23,
          "width": 35,
          "x": 1016.5,
          "y": 328
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "(({../dispatchTypeRadioGroup.props.value} \u003d 1) \u0026\u0026 {view.custom.opcServerName} !\u003d \u0027Ignition OPC UA Server\u0027)|| ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "text": "pick"
        },
        "type": "ia.input.button"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "draggable": true,
                "id": "opcPicker",
                "modal": false,
                "overlayDismiss": false,
                "resizable": false,
                "showCloseIcon": false,
                "type": "open",
                "viewParams": {
                  "callingID": "startDispatchCommand",
                  "opcItems": "{session.custom.opcItems}",
                  "opcLabel": "Start Dispatch Command",
                  "opcServerName": "{view.custom.opcServerName}",
                  "opcTag": ""
                },
                "viewPath": "UDTConfigure/opcPicker",
                "viewportBound": false
              },
              "scope": "C",
              "type": "popup"
            }
          }
        },
        "meta": {
          "name": "Button_9"
        },
        "position": {
          "height": 23,
          "width": 35,
          "x": 1000.5,
          "y": 410
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "(({../dispatchTypeRadioGroup.props.value} \u003d 2) \u0026\u0026 {view.custom.opcServerName} !\u003d \u0027Ignition OPC UA Server\u0027)|| ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "text": "pick"
        },
        "type": "ia.input.button"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "draggable": true,
                "id": "opcPicker",
                "modal": false,
                "overlayDismiss": false,
                "resizable": false,
                "showCloseIcon": false,
                "type": "open",
                "viewParams": {
                  "callingID": "stopDispatchCommand",
                  "opcItems": "{session.custom.opcItems}",
                  "opcLabel": "Stop Dispatch Command",
                  "opcServerName": "{view.custom.opcServerName}",
                  "opcTag": ""
                },
                "viewPath": "UDTConfigure/opcPicker",
                "viewportBound": false
              },
              "scope": "C",
              "type": "popup"
            }
          }
        },
        "meta": {
          "name": "Button_10"
        },
        "position": {
          "height": 23,
          "width": 35,
          "x": 1000.5,
          "y": 443
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "(({../dispatchTypeRadioGroup.props.value} \u003d 2) \u0026\u0026 ({view.custom.opcServerName} !\u003d \u0027Ignition OPC UA Server\u0027) \u0026\u0026 {../is3WireDiscreteDispatchCheckbox.props.selected})|| ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "text": "pick"
        },
        "type": "ia.input.button"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "draggable": true,
                "id": "opcPicker",
                "modal": false,
                "overlayDismiss": false,
                "resizable": false,
                "showCloseIcon": false,
                "type": "open",
                "viewParams": {
                  "callingID": "startDispatchCommandFeedback",
                  "opcItems": "{session.custom.opcItems}",
                  "opcLabel": "Start Dispatch Command Feedback",
                  "opcServerName": "{view.custom.opcServerName}",
                  "opcTag": ""
                },
                "viewPath": "UDTConfigure/opcPicker",
                "viewportBound": false
              },
              "scope": "C",
              "type": "popup"
            }
          }
        },
        "meta": {
          "name": "Button_11"
        },
        "position": {
          "height": 23,
          "width": 35,
          "x": 1000.5,
          "y": 506
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "(({../dispatchTypeRadioGroup.props.value} \u003d 2) \u0026\u0026 ({view.custom.opcServerName} !\u003d \u0027Ignition OPC UA Server\u0027) \u0026\u0026 {../hasControllerDispatchConfirmationCheckbox.props.selected})|| ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "text": "pick"
        },
        "type": "ia.input.button"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "draggable": true,
                "id": "opcPicker",
                "modal": false,
                "overlayDismiss": false,
                "resizable": false,
                "showCloseIcon": false,
                "type": "open",
                "viewParams": {
                  "callingID": "stopDispatchCommandFeedback",
                  "opcItems": "{session.custom.opcItems}",
                  "opcLabel": "Stop Dispatch Command Feedback",
                  "opcServerName": "{view.custom.opcServerName}",
                  "opcTag": ""
                },
                "viewPath": "UDTConfigure/opcPicker",
                "viewportBound": false
              },
              "scope": "C",
              "type": "popup"
            }
          }
        },
        "meta": {
          "name": "Button_12"
        },
        "position": {
          "height": 23,
          "width": 35,
          "x": 1000.5,
          "y": 539
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "(({../dispatchTypeRadioGroup.props.value} \u003d 2)  \u0026\u0026 {../hasControllerDispatchConfirmationCheckbox.props.selected} \u0026\u0026 ({view.custom.opcServerName} !\u003d \u0027Ignition OPC UA Server\u0027) \u0026\u0026 {../is3WireDiscreteDispatchCheckbox.props.selected})|| ({session.props.device.type}\u003d\u0027designer\u0027)"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "text": "pick"
        },
        "type": "ia.input.button"
      },
      {
        "meta": {
          "name": "Label_39"
        },
        "position": {
          "height": 38,
          "width": 212,
          "x": 689.5,
          "y": 114.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasCalculatedDispatchConfirmationCheckbox.props.selected} ||{../hasControllerDispatchConfirmationCheckbox.props.selected} || {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "UDTConfigureTextFieldLabelSide"
          },
          "text": "Dispatch Inactive Confirmation"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "flex_dispatchConfirmationAlarmTagTextField_0"
        },
        "position": {
          "height": 20,
          "width": 293.6600000000001,
          "x": 911.5,
          "y": 122.5
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{../hasCalculatedDispatchConfirmationCheckbox.props.selected} ||{../hasControllerDispatchConfirmationCheckbox.props.selected} || {session.props.device.type}\u003d\u0027designer\u0027"
              },
              "type": "expr"
            }
          },
          "props.text": {
            "binding": {
              "config": {
                "bidirectional": true,
                "fallbackDelay": 2.5,
                "mode": "expression",
                "tagPath": "{session.custom.AssetPath} + \u0027/Parameters.flex_dispatchConfirmedInactiveTag\u0027"
              },
              "type": "tag"
            }
          }
        },
        "props": {
          "deferUpdates": false,
          "style": {
            "classes": "UDTConfigureTextFieldEntry"
          }
        },
        "type": "ia.input.text-field"
      }
    ],
    "events": {
      "dom": {
        "onMouseEnter": {
          "config": {
            "script": "\taggregateDipatchParentDropdown \u003d self.getChild(\u0027aggregateDispatchParentDropdown\u0027)\n\temptyList \u003d []\n\tparameters \u003d StandardUDT.utils.getUDTParameters(self.session.custom.AssetPath)\n\taggregateDispatchParentPath \u003d StandardUDT.utils.extractParameterValue(parameters[\u0027config_aggregateDispatchParentPath\u0027])\n\tassets \u003d system.tag.browse(self.session.custom.AssetSite,{\u0027name\u0027:\u0027*\u0027,\u0027tagType\u0027:\u0027UdtInstance\u0027})\n\taggregateDipatchParentDropdown.props.options \u003d emptyList\n\tfor asset in assets.getResults():\n\t\taggregateDipatchParentDropdown.props.options.append({\u0027value\u0027: asset[\u0027fullPath\u0027],\u0027label\u0027: asset[\u0027name\u0027]})\n\taggregateDipatchParentDropdown.props.value \u003d aggregateDispatchParentPath\n\t\n\tnewBranches \u003d []\n\tparameters \u003d StandardUDT.utils.getUDTParameters(self.session.custom.AssetPath)\n\topcServerName \u003d StandardUDT.utils.extractParameterValue(parameters[\u0027opc_serverName\u0027])\n\topcPath \u003d StandardUDT.utils.extractParameterValue(parameters[\u0027opc_serverTopic\u0027])\n\topcNode \u003d StandardUDT.utils.extractParameterValue(parameters[\u0027opc_serverNode\u0027])\n\tif opcNode !\u003d \u0027\u0027:\n\t\tnewBranches \u003d StandardUDT.utils.buildTree(opcServerName,opcPath + opcNode)\n\telse:\n\t\tnewBranches \u003d StandardUDT.utils.buildTree(opcServerName,opcPath)\n\tself.session.custom.opcItems \u003d newBranches\n\tself.view.custom.opcServerName \u003d opcServerName\n\t\n\t"
          },
          "scope": "G",
          "type": "script"
        }
      }
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom.AssetPath": {
        "binding": {
          "config": {
            "path": "session.custom.AssetPath"
          },
          "type": "property"
        }
      },
      "custom.AssetSite": {
        "binding": {
          "config": {
            "path": "session.custom.AssetSite"
          },
          "type": "property"
        }
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "stopDispatchCommandFeedback",
          "pageScope": true,
          "script": "\tself.props.text \u003d payload[\u0027opcTag\u0027]\n\tsystem.perspective.closePopup(\u0027opcPicker\u0027)",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.coord"
  }
}